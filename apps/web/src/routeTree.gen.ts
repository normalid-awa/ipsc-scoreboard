/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TimerRouteImport } from './routes/timer'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as NewUserRouteImport } from './routes/newUser'
import { Route as IndexRouteImport } from './routes/index'
import { Route as StagesIndexRouteImport } from './routes/stages/index'
import { Route as ShootersIndexRouteImport } from './routes/shooters/index'
import { Route as StagesStageIdRouteImport } from './routes/stages/$stageId'
import { Route as AccountShooterProfileManagementRouteImport } from './routes/account/shooterProfileManagement'
import { Route as AccountResetPasswordRouteImport } from './routes/account/resetPassword'
import { Route as AccountManagementRouteImport } from './routes/account/management'

const TimerRoute = TimerRouteImport.update({
  id: '/timer',
  path: '/timer',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const NewUserRoute = NewUserRouteImport.update({
  id: '/newUser',
  path: '/newUser',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const StagesIndexRoute = StagesIndexRouteImport.update({
  id: '/stages/',
  path: '/stages/',
  getParentRoute: () => rootRouteImport,
} as any)
const ShootersIndexRoute = ShootersIndexRouteImport.update({
  id: '/shooters/',
  path: '/shooters/',
  getParentRoute: () => rootRouteImport,
} as any)
const StagesStageIdRoute = StagesStageIdRouteImport.update({
  id: '/stages/$stageId',
  path: '/stages/$stageId',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountShooterProfileManagementRoute =
  AccountShooterProfileManagementRouteImport.update({
    id: '/account/shooterProfileManagement',
    path: '/account/shooterProfileManagement',
    getParentRoute: () => rootRouteImport,
  } as any)
const AccountResetPasswordRoute = AccountResetPasswordRouteImport.update({
  id: '/account/resetPassword',
  path: '/account/resetPassword',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountManagementRoute = AccountManagementRouteImport.update({
  id: '/account/management',
  path: '/account/management',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/newUser': typeof NewUserRoute
  '/settings': typeof SettingsRoute
  '/timer': typeof TimerRoute
  '/account/management': typeof AccountManagementRoute
  '/account/resetPassword': typeof AccountResetPasswordRoute
  '/account/shooterProfileManagement': typeof AccountShooterProfileManagementRoute
  '/stages/$stageId': typeof StagesStageIdRoute
  '/shooters': typeof ShootersIndexRoute
  '/stages': typeof StagesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/newUser': typeof NewUserRoute
  '/settings': typeof SettingsRoute
  '/timer': typeof TimerRoute
  '/account/management': typeof AccountManagementRoute
  '/account/resetPassword': typeof AccountResetPasswordRoute
  '/account/shooterProfileManagement': typeof AccountShooterProfileManagementRoute
  '/stages/$stageId': typeof StagesStageIdRoute
  '/shooters': typeof ShootersIndexRoute
  '/stages': typeof StagesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/newUser': typeof NewUserRoute
  '/settings': typeof SettingsRoute
  '/timer': typeof TimerRoute
  '/account/management': typeof AccountManagementRoute
  '/account/resetPassword': typeof AccountResetPasswordRoute
  '/account/shooterProfileManagement': typeof AccountShooterProfileManagementRoute
  '/stages/$stageId': typeof StagesStageIdRoute
  '/shooters/': typeof ShootersIndexRoute
  '/stages/': typeof StagesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/newUser'
    | '/settings'
    | '/timer'
    | '/account/management'
    | '/account/resetPassword'
    | '/account/shooterProfileManagement'
    | '/stages/$stageId'
    | '/shooters'
    | '/stages'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/newUser'
    | '/settings'
    | '/timer'
    | '/account/management'
    | '/account/resetPassword'
    | '/account/shooterProfileManagement'
    | '/stages/$stageId'
    | '/shooters'
    | '/stages'
  id:
    | '__root__'
    | '/'
    | '/newUser'
    | '/settings'
    | '/timer'
    | '/account/management'
    | '/account/resetPassword'
    | '/account/shooterProfileManagement'
    | '/stages/$stageId'
    | '/shooters/'
    | '/stages/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NewUserRoute: typeof NewUserRoute
  SettingsRoute: typeof SettingsRoute
  TimerRoute: typeof TimerRoute
  AccountManagementRoute: typeof AccountManagementRoute
  AccountResetPasswordRoute: typeof AccountResetPasswordRoute
  AccountShooterProfileManagementRoute: typeof AccountShooterProfileManagementRoute
  StagesStageIdRoute: typeof StagesStageIdRoute
  ShootersIndexRoute: typeof ShootersIndexRoute
  StagesIndexRoute: typeof StagesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/timer': {
      id: '/timer'
      path: '/timer'
      fullPath: '/timer'
      preLoaderRoute: typeof TimerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/newUser': {
      id: '/newUser'
      path: '/newUser'
      fullPath: '/newUser'
      preLoaderRoute: typeof NewUserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/stages/': {
      id: '/stages/'
      path: '/stages'
      fullPath: '/stages'
      preLoaderRoute: typeof StagesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/shooters/': {
      id: '/shooters/'
      path: '/shooters'
      fullPath: '/shooters'
      preLoaderRoute: typeof ShootersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/stages/$stageId': {
      id: '/stages/$stageId'
      path: '/stages/$stageId'
      fullPath: '/stages/$stageId'
      preLoaderRoute: typeof StagesStageIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account/shooterProfileManagement': {
      id: '/account/shooterProfileManagement'
      path: '/account/shooterProfileManagement'
      fullPath: '/account/shooterProfileManagement'
      preLoaderRoute: typeof AccountShooterProfileManagementRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account/resetPassword': {
      id: '/account/resetPassword'
      path: '/account/resetPassword'
      fullPath: '/account/resetPassword'
      preLoaderRoute: typeof AccountResetPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account/management': {
      id: '/account/management'
      path: '/account/management'
      fullPath: '/account/management'
      preLoaderRoute: typeof AccountManagementRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NewUserRoute: NewUserRoute,
  SettingsRoute: SettingsRoute,
  TimerRoute: TimerRoute,
  AccountManagementRoute: AccountManagementRoute,
  AccountResetPasswordRoute: AccountResetPasswordRoute,
  AccountShooterProfileManagementRoute: AccountShooterProfileManagementRoute,
  StagesStageIdRoute: StagesStageIdRoute,
  ShootersIndexRoute: ShootersIndexRoute,
  StagesIndexRoute: StagesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
